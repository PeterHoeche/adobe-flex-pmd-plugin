<?xml version="1.0"?>
<!--

       Copyright (c) 2009, Adobe Systems, Incorporated
       All rights reserved.

       Redistribution  and  use  in  source  and  binary  forms, with or without
       modification,  are  permitted  provided  that  the  following  conditions
       are met:

         * Redistributions  of  source  code  must  retain  the  above copyright
           notice, this list of conditions and the following disclaimer.
         * Redistributions  in  binary  form  must reproduce the above copyright
           notice,  this  list  of  conditions  and  the following disclaimer in
           the    documentation   and/or   other  materials  provided  with  the
           distribution.
         * Neither the name of the Adobe Systems, Incorporated. nor the names of
           its  contributors  may be used to endorse or promote products derived
           from this software without specific prior written permission.

       THIS  SOFTWARE  IS  PROVIDED  BY THE  COPYRIGHT  HOLDERS AND CONTRIBUTORS
       "AS IS"  AND  ANY  EXPRESS  OR  IMPLIED  WARRANTIES,  INCLUDING,  BUT NOT
       LIMITED  TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
       PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
       OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL,
       EXEMPLARY,  OR  CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT  LIMITED TO,
       PROCUREMENT  OF  SUBSTITUTE   GOODS  OR   SERVICES;  LOSS  OF  USE,  DATA,
       OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
       LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY, OR TORT (INCLUDING
       NEGLIGENCE  OR  OTHERWISE)  ARISING  IN  ANY  WAY  OUT OF THE USE OF THIS
       SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-->
<ruleset name="Switches Rules" xmlns="http://pmd.sf.net/ruleset/1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
	xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
	
	<description>
      The Architecture ruleset contains a collection of good practices around architecture.
	</description>
	
	<rule
		class="com.adobe.ac.pmd.rules.switchrules.SwitchStatementsShouldHaveDefaultRule"
		message="A switch statement does not contain a default statement">
		<description>Switch statements should have a default label in order to detect corner cases.</description>
		<priority>1</priority>
		<example>
public class Foo 
{
   public funciton bar() : void 
   {
      var  x : int = 2;
      switch (x) 
      {
         case 2: var j : int = 8;
      }
   }
}     
      </example>
	</rule>

	<rule class="com.adobe.ac.pmd.rules.switchrules.NestedSwitchRule"
		message="Switch must not be nested">
		<description>As a general practice, switch statement should not be used. Prefer using inheritance. It is even harder to read when switch statements are nested.</description>
		<priority>3</priority>
		<example>
public function foo( a : Number, b : Number ) : void
{
    switch( a )
    {
       case 1:
          break;
       case 2:                   
          switch ( b ) 
          {
            case 3 :
               break;
            case 4 :
               break;
          }
          break;                     
    }
}
      </example>
	</rule>

	<rule class="com.adobe.ac.pmd.rules.switchrules.NonBreakableSwitchCaseRule"
		message="Switch case must include break statement">
		<priority>1</priority>
		<example>
switch(event.type){
  case GoogleSearchPanel.LAUNCH_GOOGLE_WEB_SEARCH:
	  googleResquest.url = ""; // VIOLATION
  case GoogleSearchPanel.LAUNCH_GOOGLE_IMAGE_SEARCH:                   
  case GoogleSearchPanel.LAUNCH_GOOGLE_IMAGE_SEARCH2:                   
	  googleResquest.url = "";
	  break;
  default:
	  return;
}
      </example>
	</rule>

	
	<rule
		class="com.adobe.ac.pmd.rules.switchrules.TooFewBrancheInSwitchStatementRule"
		message="There are too few branches in this switch statement ({0} minimum, but {1} actual)">
		<description>Switch statements are designed for complex branches, and allow branches to share treatment. Using a switch for only 2 branches is ill advised, as switches are not as easy to understand as if. In this case, it's most likely is a good idea to use a if statement</description>
		<priority>5</priority>
		<properties>
			<property name="minimum">
				<value>3</value>
			</property>
		</properties>
		<example>
      </example>
	</rule>
	
	<rule class="com.adobe.ac.pmd.rules.switchrules.IdenticalSwitchCasesRule"
		message="Two switch cases should not be identical">
		<priority>1</priority>
	</rule>
		
</ruleset>
