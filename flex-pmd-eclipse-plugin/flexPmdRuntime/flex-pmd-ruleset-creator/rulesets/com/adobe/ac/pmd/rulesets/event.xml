<?xml version="1.0"?>
<!--

       Copyright (c) 2009, Adobe Systems, Incorporated
       All rights reserved.

       Redistribution  and  use  in  source  and  binary  forms, with or without
       modification,  are  permitted  provided  that  the  following  conditions
       are met:

         * Redistributions  of  source  code  must  retain  the  above copyright
           notice, this list of conditions and the following disclaimer.
         * Redistributions  in  binary  form  must reproduce the above copyright
           notice,  this  list  of  conditions  and  the following disclaimer in
           the    documentation   and/or   other  materials  provided  with  the
           distribution.
         * Neither the name of the Adobe Systems, Incorporated. nor the names of
           its  contributors  may be used to endorse or promote products derived
           from this software without specific prior written permission.

       THIS  SOFTWARE  IS  PROVIDED  BY THE  COPYRIGHT  HOLDERS AND CONTRIBUTORS
       "AS IS"  AND  ANY  EXPRESS  OR  IMPLIED  WARRANTIES,  INCLUDING,  BUT NOT
       LIMITED  TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
       PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
       OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL,
       EXEMPLARY,  OR  CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT  LIMITED TO,
       PROCUREMENT  OF  SUBSTITUTE   GOODS  OR   SERVICES;  LOSS  OF  USE,  DATA,
       OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
       LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY, OR TORT (INCLUDING
       NEGLIGENCE  OR  OTHERWISE)  ARISING  IN  ANY  WAY  OUT OF THE USE OF THIS
       SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-->
<ruleset name="Event Rules" xmlns="http://pmd.sf.net/ruleset/1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
	xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
	
	<description>
      The Event ruleset contains a collection of rules related to event bad practices.
	</description>
	
	<rule class="com.adobe.ac.pmd.rules.event.EventMissingCloneFunctionRule"
		message="The clone event must be overiden in a custom event">
		<description>When creating your own custom Event class, you must override the inherited Event.clone() method in order for it to duplicate the properties of your custom class. If you do not set all the properties that you add in your event subclass, those properties will not have the correct values when the event is cloned. This is important because the Flex SDK clones events whenever redispatching takes place. </description>
		<priority>1</priority>
		<example>
public class FirstCustomEvent   // VIOLATION - clone method is missing
{
   public var lala : String;
   
   public function FirstCustomEvent()
   {         
   }
}
      </example>
	</rule>
	
	<rule
		class="com.adobe.ac.pmd.rules.event.PublicVariableInCustomEventRule"
		message="No public variables should be inside a custom event. This variable ({0}) is public">
		<description>In order to improve encapsulation in your custom event, it is better not to have public variable in your event. Prefer having read-only attributes, set by the event constructor.</description>
		<priority>3</priority>
		<example>
public class FirstCustomEvent   
{
   public var lala : String; // VIOLATION
   
   public function FirstCustomEvent()
   {         
   }
}      
	   </example>
	</rule>
	
	<rule
		class="com.adobe.ac.pmd.rules.event.ConstructorDispatchingEventRule"
		message="An event is dispatched in a constructor">
		<description>This is pointless, since event listeners cannot be attached to an object before it has been constructed, so nothing can ever hear the event</description>
		<priority>1</priority>
		<example>
public class BigModel   
{
   public function BigModel()
   {    
      dispatchEvent( new Event( "pointlessEvent" ) );     
   }
}
		</example>
	</rule>
	<rule class="com.adobe.ac.pmd.rules.event.DefaultEventNameRule"
		message="Event name should be set explicitly">
		<priority>3</priority>
		<example>
public class DefaultNameEvent extends Event	
{
	public function DefaultNameEvent( type : String = "" )
	{
		super( type );
	}
}		
		</example>
	</rule>
	
	<rule class="com.adobe.ac.pmd.rules.event.DispatchHardCodedEventNameRule"
		message="DispatchEvent function must dispatch constant strings">
		<description>You should not dispatch a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</description>
		<priority>1</priority>
		<example>
public class Foo 
{
   public function bar() : void
   {
      dispatch( new Event( "myHardCodedEvent" ) ); // VIOLATION
   }
}
      </example>
	</rule>
	
	<rule
		class="com.adobe.ac.pmd.rules.event.ListenForHardCodedEventNameRule"
		message="addEventListener must not contain hard coded strings">
		<description>You should not listen for a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</description>
		<priority>1</priority>
		<example>
public class Foo 
{
   public function bar() : void
   {
      addEventListener( "myHardCodedEvent", handleMyHardCodedEvent ); // VIOLATION
   }
}      
      </example>
	</rule>
	
	<rule
		class="com.adobe.ac.pmd.rules.event.UnboundTypeInMetadataRule"
		message="This type ({0}) was not found within the scope against which PMD was run">
		<priority>1</priority>
		<example>
[Event(name="myTypeEvent",type="UnknownType")] // VIOLATION
public class UnboundMetadata
{
}		
		</example>
	</rule>
	
	<rule
		class="com.adobe.ac.pmd.rules.event.UntypedEventMetadataRule"
		message="This event type is not specified">
		<description>Specifying a type will allow Flash builder and the class to have this event exposed in its API</description>
		<priority>3</priority>
		<example>
[Event(name="myTypeEvent")] // VIOLATION
public class UnTypedMetadata
{
}		
		</example>
	</rule>
	
</ruleset>
