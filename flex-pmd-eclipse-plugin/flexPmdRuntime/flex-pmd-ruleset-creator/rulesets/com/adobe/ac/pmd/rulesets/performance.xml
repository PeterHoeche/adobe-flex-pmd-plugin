<?xml version="1.0"?>
<!--

       Copyright (c) 2009, Adobe Systems, Incorporated
       All rights reserved.

       Redistribution  and  use  in  source  and  binary  forms, with or without
       modification,  are  permitted  provided  that  the  following  conditions
       are met:

         * Redistributions  of  source  code  must  retain  the  above copyright
           notice, this list of conditions and the following disclaimer.
         * Redistributions  in  binary  form  must reproduce the above copyright
           notice,  this  list  of  conditions  and  the following disclaimer in
           the    documentation   and/or   other  materials  provided  with  the
           distribution.
         * Neither the name of the Adobe Systems, Incorporated. nor the names of
           its  contributors  may be used to endorse or promote products derived
           from this software without specific prior written permission.

       THIS  SOFTWARE  IS  PROVIDED  BY THE  COPYRIGHT  HOLDERS AND CONTRIBUTORS
       "AS IS"  AND  ANY  EXPRESS  OR  IMPLIED  WARRANTIES,  INCLUDING,  BUT NOT
       LIMITED  TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
       PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
       OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL,
       EXEMPLARY,  OR  CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT  LIMITED TO,
       PROCUREMENT  OF  SUBSTITUTE   GOODS  OR   SERVICES;  LOSS  OF  USE,  DATA,
       OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
       LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY, OR TORT (INCLUDING
       NEGLIGENCE  OR  OTHERWISE)  ARISING  IN  ANY  WAY  OUT OF THE USE OF THIS
       SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-->
<ruleset name="Performance Rules" xmlns="http://pmd.sf.net/ruleset/1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
	xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
	
	<description>
      This Ruleset contains a collection of good practices related to the performance (CPU and memory).
  </description>
  
	<rule class="com.adobe.ac.pmd.rules.performance.DynamicFiltersUsedInPopup"
		message="A popup should not use dynamic filters">
		<description>Prefer using embed filters in assets</description>
		<priority>3</priority>
		<example>
      </example>
	</rule>
	
	<rule class="com.adobe.ac.pmd.rules.performance.CyclomaticComplexityRule"
		message="This method is too complex. Maximum complexity is {0}, but its cyclomatic complexity was {1}">
		<priority>3</priority>
		<properties>
			<property name="maximum">
				<value>10</value>
			</property>
		</properties>
	</rule>
	
	<rule class="com.adobe.ac.pmd.rules.performance.HeavyConstructorRule"
		message="Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of {0} has been detected">
		<description><![CDATA[The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT.]]></description>
		<priority>3</priority>
	</rule>
	
	<rule class="com.adobe.ac.pmd.rules.performance.CreationPolicySetToAllRule"
		message="creationPolicy to ALL impacts the performance significantly">
		<priority>1</priority>
	</rule>
	
	<rule class="com.adobe.ac.pmd.rules.performance.BindableClassRule"
		message="Globally bindable classes can lead to unexpected behaviour especially when you have a setter to a property, and hits the performance of the application">
		<priority>3</priority>	
	</rule>

	<rule class="com.adobe.ac.pmd.rules.performance.AvoidInstanciationInLoopRule"
		message="Instanciating a variable in a loop can be expensive">
		<description></description>
		<priority>5</priority>
		<example>
      </example>
	</rule>

	<rule class="com.adobe.ac.pmd.rules.performance.AvoidDeclarationInLoopRule"
		message="Declaring a variable in a loop can be expensive">
		<description></description>
		<priority>5</priority>
		<example>
      </example>
	</rule>

	<rule class="com.adobe.ac.pmd.rules.performance.DeeplyNestedIfRule"
		message="Nested if statements are not a good design">
		<priority>3</priority>
	</rule>

	<rule class="com.adobe.ac.pmd.rules.performance.RecursiveStyleManagerRule"
		message="Detect calls to the StyleManager that don’t pass “false” as the second parameter">
		<description>A recursive style manager call can be a very expensive operation, causing parts of the UI to flicker visibly. Instead it is preferable to defer the creation of parts of the UI that depend on a runtime CSS SWF until after the SWF has been loaded. In this case a recursive call is not required.</description>
		<priority>3</priority>
	</rule>

	<rule class="com.adobe.ac.pmd.rules.performance.AvoidUsingMathFloorRule"
		message="VM will automatically do the rounding when using an int, so it should be : var position:int = floatingValue;">
		<priority>5</priority>
		<example>
var position:Number = Math.floor ( floatingValue ); 
		</example>
	</rule>

	<rule class="com.adobe.ac.pmd.rules.performance.AvoidUsingMathCeilRule"
		message="VM will automatically do the rounding when using an int, so should be : var position:int = floatingValue + 1;">
		<priority>5</priority>
		<example>
var position:Number = Math.ceil ( floatingValue );
		</example>
	</rule>

	<rule class="com.adobe.ac.pmd.rules.performance.AvoidUsingMathRoundRule"
		message="manual calculation will be much faster : var position:int = (floatingValue > 0.0) ? int(floatingValue + 0.5) : int(floatingValue - 0.5);">
		<priority>5</priority>
		<example>
var position:Number = Math.round ( floatingValue );
		</example>
	</rule>

</ruleset>